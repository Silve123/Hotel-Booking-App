{"ast":null,"code":"var _jsxFileName = \"/home/headmaster/Templates/hotel-booking-app/src/components/MyBookings.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { db, auth } from \"../firebaseConfig\";\nimport { collection, getDocs, query, where, doc, getDoc } from \"firebase/firestore\"; // Firestore functions\nimport './styling/MyBookings.scss'; // SCSS for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MyBookings = () => {\n  _s();\n  const [bookings, setBookings] = useState([]);\n\n  // Helper function to check if two dates are consecutive\n  const areDatesConsecutive = (date1, date2) => {\n    const diffTime = new Date(date2).getTime() - new Date(date1).getTime();\n    return diffTime === 86400000; // 1 day in milliseconds\n  };\n\n  // Helper function to merge consecutive bookings\n  const mergeConsecutiveBookings = bookings => {\n    if (bookings.length === 0) return [];\n\n    // Sort bookings by roomId and booking date\n    const sortedBookings = bookings.sort((a, b) => {\n      if (a.roomId !== b.roomId) {\n        return a.roomId.localeCompare(b.roomId);\n      }\n      return new Date(a.bookingDate) - new Date(b.bookingDate);\n    });\n    const mergedBookings = [];\n    let currentRange = {\n      start: sortedBookings[0].bookingDate,\n      end: sortedBookings[0].bookingDate,\n      roomId: sortedBookings[0].roomId\n    };\n    for (let i = 1; i < sortedBookings.length; i++) {\n      const currentBooking = sortedBookings[i];\n      if (currentRange.roomId === currentBooking.roomId && areDatesConsecutive(currentRange.end, currentBooking.bookingDate)) {\n        // If consecutive and for the same room, extend the range\n        currentRange.end = currentBooking.bookingDate;\n      } else {\n        // If not consecutive or different room, push the current range and start a new range\n        mergedBookings.push(currentRange);\n        currentRange = {\n          start: currentBooking.bookingDate,\n          end: currentBooking.bookingDate,\n          roomId: currentBooking.roomId\n        };\n      }\n    }\n    mergedBookings.push(currentRange); // Push the final range\n    return mergedBookings;\n  };\n  useEffect(() => {\n    const fetchBookings = async () => {\n      const user = auth.currentUser; // Get current user\n      if (user) {\n        try {\n          const bookingsCollectionRef = collection(db, \"bookings\");\n          const q = query(bookingsCollectionRef, where(\"userId\", \"==\", user.uid)); // Query for user bookings\n          const bookingsSnapshot = await getDocs(q);\n          const bookingsData = bookingsSnapshot.docs.map(doc => ({\n            id: doc.id,\n            ...doc.data()\n          }));\n\n          // Merge consecutive bookings\n          const mergedBookings = mergeConsecutiveBookings(bookingsData);\n\n          // Fetch room names\n          const bookingsWithRoomNames = await Promise.all(mergedBookings.map(async booking => {\n            const roomDocRef = doc(db, \"rooms\", booking.roomId); // Query the rooms collection using roomId\n            const roomDoc = await getDoc(roomDocRef);\n            const roomName = roomDoc.exists() ? roomDoc.data().name : \"Unknown Room\";\n            return {\n              ...booking,\n              roomName\n            };\n          }));\n          setBookings(bookingsWithRoomNames);\n        } catch (error) {\n          console.error(\"Error fetching bookings:\", error);\n        }\n      }\n    };\n    fetchBookings();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"my-bookings-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"my-bookings-title\",\n      children: \"My Bookings\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), bookings.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"my-bookings-list\",\n      children: bookings.map((booking, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"booking-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Room: \", booking.roomName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Booking Date: \", booking.start, \" to \", booking.end]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No bookings found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n_s(MyBookings, \"mhYuI94oNh8neuxZ6UayUTRC/Ns=\");\n_c = MyBookings;\nexport default MyBookings;\nvar _c;\n$RefreshReg$(_c, \"MyBookings\");","map":{"version":3,"names":["useState","useEffect","db","auth","collection","getDocs","query","where","doc","getDoc","jsxDEV","_jsxDEV","MyBookings","_s","bookings","setBookings","areDatesConsecutive","date1","date2","diffTime","Date","getTime","mergeConsecutiveBookings","length","sortedBookings","sort","a","b","roomId","localeCompare","bookingDate","mergedBookings","currentRange","start","end","i","currentBooking","push","fetchBookings","user","currentUser","bookingsCollectionRef","q","uid","bookingsSnapshot","bookingsData","docs","map","id","data","bookingsWithRoomNames","Promise","all","booking","roomDocRef","roomDoc","roomName","exists","name","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","index","_c","$RefreshReg$"],"sources":["/home/headmaster/Templates/hotel-booking-app/src/components/MyBookings.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { db, auth } from \"../firebaseConfig\";\nimport { collection, getDocs, query, where, doc, getDoc } from \"firebase/firestore\"; // Firestore functions\nimport './styling/MyBookings.scss'; // SCSS for styling\n\nconst MyBookings = () => {\n  const [bookings, setBookings] = useState([]);\n\n  // Helper function to check if two dates are consecutive\n  const areDatesConsecutive = (date1, date2) => {\n    const diffTime = new Date(date2).getTime() - new Date(date1).getTime();\n    return diffTime === 86400000; // 1 day in milliseconds\n  };\n\n  // Helper function to merge consecutive bookings\n  const mergeConsecutiveBookings = (bookings) => {\n    if (bookings.length === 0) return [];\n\n    // Sort bookings by roomId and booking date\n    const sortedBookings = bookings.sort((a, b) => {\n      if (a.roomId !== b.roomId) {\n        return a.roomId.localeCompare(b.roomId);\n      }\n      return new Date(a.bookingDate) - new Date(b.bookingDate);\n    });\n\n    const mergedBookings = [];\n    let currentRange = {\n      start: sortedBookings[0].bookingDate,\n      end: sortedBookings[0].bookingDate,\n      roomId: sortedBookings[0].roomId,\n    };\n\n    for (let i = 1; i < sortedBookings.length; i++) {\n      const currentBooking = sortedBookings[i];\n\n      if (\n        currentRange.roomId === currentBooking.roomId &&\n        areDatesConsecutive(currentRange.end, currentBooking.bookingDate)\n      ) {\n        // If consecutive and for the same room, extend the range\n        currentRange.end = currentBooking.bookingDate;\n      } else {\n        // If not consecutive or different room, push the current range and start a new range\n        mergedBookings.push(currentRange);\n        currentRange = {\n          start: currentBooking.bookingDate,\n          end: currentBooking.bookingDate,\n          roomId: currentBooking.roomId,\n        };\n      }\n    }\n    mergedBookings.push(currentRange); // Push the final range\n    return mergedBookings;\n  };\n\n  useEffect(() => {\n    const fetchBookings = async () => {\n      const user = auth.currentUser; // Get current user\n      if (user) {\n        try {\n          const bookingsCollectionRef = collection(db, \"bookings\");\n          const q = query(bookingsCollectionRef, where(\"userId\", \"==\", user.uid)); // Query for user bookings\n          const bookingsSnapshot = await getDocs(q);\n          const bookingsData = bookingsSnapshot.docs.map((doc) => ({\n            id: doc.id,\n            ...doc.data(),\n          }));\n\n          // Merge consecutive bookings\n          const mergedBookings = mergeConsecutiveBookings(bookingsData);\n\n          // Fetch room names\n          const bookingsWithRoomNames = await Promise.all(\n            mergedBookings.map(async (booking) => {\n              const roomDocRef = doc(db, \"rooms\", booking.roomId); // Query the rooms collection using roomId\n              const roomDoc = await getDoc(roomDocRef);\n              const roomName = roomDoc.exists() ? roomDoc.data().name : \"Unknown Room\";\n              return { ...booking, roomName };\n            })\n          );\n\n          setBookings(bookingsWithRoomNames);\n        } catch (error) {\n          console.error(\"Error fetching bookings:\", error);\n        }\n      }\n    };\n\n    fetchBookings();\n  }, []);\n\n  return (\n    <div className=\"my-bookings-container\">\n      <h2 className=\"my-bookings-title\">My Bookings</h2>\n      {bookings.length > 0 ? (\n        <ul className=\"my-bookings-list\">\n          {bookings.map((booking, index) => (\n            <li key={index} className=\"booking-item\">\n              <p>Room: {booking.roomName}</p>\n              <p>\n                Booking Date: {booking.start} to {booking.end}\n              </p>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>No bookings found.</p>\n      )}\n    </div>\n  );\n};\n\nexport default MyBookings;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}