{"ast":null,"code":"var _jsxFileName = \"/home/headmaster/Templates/hotel-booking-app/src/components/MyBookings.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { db, auth } from \"../firebaseConfig\";\nimport { collection, getDocs, query, where, doc, getDoc } from \"firebase/firestore\"; // Firestore functions\nimport './styling/MyBookings.scss'; // SCSS for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MyBookings = () => {\n  _s();\n  const [bookings, setBookings] = useState([]);\n\n  // Helper function to check if two dates are consecutive\n  const areDatesConsecutive = (date1, date2) => {\n    const diffTime = new Date(date2) - new Date(date1);\n    return diffTime === 86400000; // 1 day in milliseconds\n  };\n\n  // Helper function to merge consecutive bookings\n  const mergeConsecutiveBookings = bookings => {\n    if (bookings.length === 0) return [];\n    const sortedBookings = bookings.sort((a, b) => new Date(a.bookingDate) - new Date(b.bookingDate));\n    const mergedBookings = [];\n    let currentRange = {\n      start: sortedBookings[0].bookingDate,\n      end: sortedBookings[0].bookingDate,\n      roomId: sortedBookings[0].roomId\n    };\n    for (let i = 1; i < sortedBookings.length; i++) {\n      const currentBooking = sortedBookings[i];\n      if (areDatesConsecutive(currentRange.end, currentBooking.bookingDate)) {\n        // If consecutive, extend the range\n        currentRange.end = currentBooking.bookingDate;\n      } else {\n        // If not consecutive, push current range to the result and start a new range\n        mergedBookings.push(currentRange);\n        currentRange = {\n          start: currentBooking.bookingDate,\n          end: currentBooking.bookingDate,\n          roomId: currentBooking.roomId\n        };\n      }\n    }\n    mergedBookings.push(currentRange); // Push the final range\n    return mergedBookings;\n  };\n  useEffect(() => {\n    const fetchBookings = async () => {\n      const user = auth.currentUser; // Get current user\n      if (user) {\n        try {\n          const bookingsCollectionRef = collection(db, \"bookings\");\n          const q = query(bookingsCollectionRef, where(\"userId\", \"==\", user.uid)); // Query for user bookings\n          const bookingsSnapshot = await getDocs(q);\n          const bookingsData = bookingsSnapshot.docs.map(doc => ({\n            id: doc.id,\n            ...doc.data()\n          }));\n\n          // Merge consecutive bookings\n          const mergedBookings = mergeConsecutiveBookings(bookingsData);\n\n          // Fetch room names\n          const bookingsWithRoomNames = await Promise.all(mergedBookings.map(async booking => {\n            const roomDocRef = doc(db, \"rooms\", booking.roomId); // Query the rooms collection using roomId\n            const roomDoc = await getDoc(roomDocRef);\n            const roomName = roomDoc.exists() ? roomDoc.data().name : \"Unknown Room\";\n            return {\n              ...booking,\n              roomName\n            };\n          }));\n          setBookings(bookingsWithRoomNames);\n        } catch (error) {\n          console.error(\"Error fetching bookings:\", error);\n        }\n      }\n    };\n    fetchBookings();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"my-bookings-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"my-bookings-title\",\n      children: \"My Bookings\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), bookings.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"my-bookings-list\",\n      children: bookings.map((booking, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"booking-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Room: \", booking.roomName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Booking Date: \", booking.start, \" to \", booking.end]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No bookings found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n_s(MyBookings, \"mhYuI94oNh8neuxZ6UayUTRC/Ns=\");\n_c = MyBookings;\nexport default MyBookings;\nvar _c;\n$RefreshReg$(_c, \"MyBookings\");","map":{"version":3,"names":["useState","useEffect","db","auth","collection","getDocs","query","where","doc","getDoc","jsxDEV","_jsxDEV","MyBookings","_s","bookings","setBookings","areDatesConsecutive","date1","date2","diffTime","Date","mergeConsecutiveBookings","length","sortedBookings","sort","a","b","bookingDate","mergedBookings","currentRange","start","end","roomId","i","currentBooking","push","fetchBookings","user","currentUser","bookingsCollectionRef","q","uid","bookingsSnapshot","bookingsData","docs","map","id","data","bookingsWithRoomNames","Promise","all","booking","roomDocRef","roomDoc","roomName","exists","name","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","index","_c","$RefreshReg$"],"sources":["/home/headmaster/Templates/hotel-booking-app/src/components/MyBookings.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { db, auth } from \"../firebaseConfig\";\nimport { collection, getDocs, query, where, doc, getDoc } from \"firebase/firestore\"; // Firestore functions\nimport './styling/MyBookings.scss'; // SCSS for styling\n\nconst MyBookings = () => {\n  const [bookings, setBookings] = useState([]);\n\n  // Helper function to check if two dates are consecutive\n  const areDatesConsecutive = (date1, date2) => {\n    const diffTime = new Date(date2) - new Date(date1);\n    return diffTime === 86400000; // 1 day in milliseconds\n  };\n\n  // Helper function to merge consecutive bookings\n  const mergeConsecutiveBookings = (bookings) => {\n    if (bookings.length === 0) return [];\n    \n    const sortedBookings = bookings.sort((a, b) => new Date(a.bookingDate) - new Date(b.bookingDate));\n    const mergedBookings = [];\n\n    let currentRange = { start: sortedBookings[0].bookingDate, end: sortedBookings[0].bookingDate, roomId: sortedBookings[0].roomId };\n\n    for (let i = 1; i < sortedBookings.length; i++) {\n      const currentBooking = sortedBookings[i];\n\n      if (areDatesConsecutive(currentRange.end, currentBooking.bookingDate)) {\n        // If consecutive, extend the range\n        currentRange.end = currentBooking.bookingDate;\n      } else {\n        // If not consecutive, push current range to the result and start a new range\n        mergedBookings.push(currentRange);\n        currentRange = { start: currentBooking.bookingDate, end: currentBooking.bookingDate, roomId: currentBooking.roomId };\n      }\n    }\n    mergedBookings.push(currentRange); // Push the final range\n    return mergedBookings;\n  };\n\n  useEffect(() => {\n    const fetchBookings = async () => {\n      const user = auth.currentUser; // Get current user\n      if (user) {\n        try {\n          const bookingsCollectionRef = collection(db, \"bookings\");\n          const q = query(bookingsCollectionRef, where(\"userId\", \"==\", user.uid)); // Query for user bookings\n          const bookingsSnapshot = await getDocs(q);\n          const bookingsData = bookingsSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\n\n          // Merge consecutive bookings\n          const mergedBookings = mergeConsecutiveBookings(bookingsData);\n\n          // Fetch room names\n          const bookingsWithRoomNames = await Promise.all(mergedBookings.map(async booking => {\n            const roomDocRef = doc(db, \"rooms\", booking.roomId); // Query the rooms collection using roomId\n            const roomDoc = await getDoc(roomDocRef);\n            const roomName = roomDoc.exists() ? roomDoc.data().name : \"Unknown Room\";\n            return { ...booking, roomName };\n          }));\n\n          setBookings(bookingsWithRoomNames);\n        } catch (error) {\n          console.error(\"Error fetching bookings:\", error);\n        }\n      }\n    };\n\n    fetchBookings();\n  }, []);\n\n  return (\n    <div className=\"my-bookings-container\">\n      <h2 className=\"my-bookings-title\">My Bookings</h2>\n      {bookings.length > 0 ? (\n        <ul className=\"my-bookings-list\">\n          {bookings.map((booking, index) => (\n            <li key={index} className=\"booking-item\">\n              <p>Room: {booking.roomName}</p>\n              <p>Booking Date: {booking.start} to {booking.end}</p>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>No bookings found.</p>\n      )}\n    </div>\n  );\n};\n\nexport default MyBookings;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}